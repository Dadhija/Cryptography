# -*- coding: utf-8 -*-
"""Homework 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iuJP7OUSWVilU8iv-UIcKvu5ILibiQFp
"""

!pip install pycryptodome

import hashlib
import binascii
from Crypto.Cipher import DES, AES


UID = 119186367
Last_Name = "Patel"
First_Name = "Dadhija"


def des_input_av_test(inputblock, key, bitlist):
    diff_list = []
    
    cipher = DES.new(key, DES.MODE_ECB)
    ciphertext = cipher.encrypt(inputblock)

    for b in bitlist:
        b = 127-b
        integer_value = int.from_bytes(inputblock, byteorder='big')
        mask = 1 << b
        integer_value ^= mask
        newinput = integer_value.to_bytes((integer_value.bit_length() + 7) // 8, byteorder='big')

        newCipher = DES.new(key, DES.MODE_ECB)
        newCiphertext = newCipher.encrypt(newinput)

        

        count = 0
        ciphertextbin = ''
        newCiphertextbin = ''

        for i in range(len(ciphertext)):
          ciphertextbin += format(ciphertext[i], "08b")
          newCiphertextbin += format(newCiphertext[i], "08b")

        
        
        # Compare the binary strings bit by bit and count differences
        for j in range(128):
            if ciphertextbin[j] != newCiphertextbin[j]:
                count += 1
    
        
        diff_list.append(count)
    return diff_list


def des_key_av_test(inputblock, key, bitlist):
    diff_list = []
    
    cipher = DES.new(key, DES.MODE_ECB)
    ciphertext = cipher.encrypt(inputblock)

    for b in bitlist:
        b = 63-b
        integer_value = int.from_bytes(key, byteorder='big')
        mask = 1 << b
        integer_value ^= mask
        newkey = integer_value.to_bytes((integer_value.bit_length() + 7) // 8 , byteorder='big')

        newCipher = DES.new(newkey, DES.MODE_ECB)
        newCiphertext = newCipher.encrypt(inputblock)

        

        count = 0
        ciphertextbin = ''
        newCiphertextbin = ''

        for i in range(len(ciphertext)):
          ciphertextbin += format(ciphertext[i], "08b")
          newCiphertextbin += format(newCiphertext[i], "08b")

        
        for j in range(128):
            if ciphertextbin[j] != newCiphertextbin[j]:
                count += 1
    
        
        diff_list.append(count)
    return diff_list

def aes_input_av_test(inputblock, key, bitlist):
    diff_list = []
    
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(inputblock)

    for b in bitlist:
        b = 127-b
        integer_value = int.from_bytes(inputblock, byteorder='big')
        mask = 1 << b
        integer_value ^= mask
        newinput = integer_value.to_bytes((integer_value.bit_length() + 7) // 8 , byteorder='big')

        newCipher = AES.new(key, AES.MODE_ECB)
        newCiphertext = newCipher.encrypt(newinput)

        

        count = 0
        ciphertextbin = ''
        newCiphertextbin = ''

        for i in range(len(ciphertext)):
          ciphertextbin += format(ciphertext[i], "08b")
          newCiphertextbin += format(newCiphertext[i], "08b")

        
        for j in range(128):
            if ciphertextbin[j] != newCiphertextbin[j]:
                count += 1
    
        
        diff_list.append(count)
    return diff_list


def aes_key_av_test(inputblock, key, bitlist):
    diff_list = []
    
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(inputblock)

    for b in bitlist:
        b = 127-b
        integer_value = int.from_bytes(key, byteorder='big')
        mask = 1 << b
        integer_value ^= mask
        newkey = integer_value.to_bytes((integer_value.bit_length() + 7) // 8 , byteorder='big')

        newCipher = AES.new(newkey, AES.MODE_ECB)
        newCiphertext = newCipher.encrypt(inputblock)

        count = 0
        ciphertextbin = ''
        newCiphertextbin = ''

        for i in range(len(ciphertext)):
          ciphertextbin += format(ciphertext[i], "08b")
          newCiphertextbin += format(newCiphertext[i], "08b")

        
        for j in range(128):
            if ciphertextbin[j] != newCiphertextbin[j]:
                count += 1
    
        
        diff_list.append(count)
    return diff_list


if __name__ == "__main__":
  list1 = des_input_av_test(b'thisoneis16bytes', b'deskey!!', [3,25,36])
  print (list1)

  list2 = des_key_av_test(b'thisoneis16bytes', b'deskey!!', [3,25,36])
  print (list2)

  list3 = aes_input_av_test(b'thisoneis16bytes', b'veryverylongkey!', [5,29,38])
  print(list3)

  list4 = aes_key_av_test(b'thisoneis16bytes', b'veryverylongkey!', [5,29,38])
  print(list4)